on:
  push:
    tags:
    - 'v*'
name: Handle Release
jobs:
  release:
    permissions:
      contents: write
      discussions: write
    name: Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version-file: './go.mod'

    - name: Get tag version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Build Asset (linux amd64)
      run: CGO_ENABLED=0 GOOS=linux   GOARCH=amd64 go build -ldflags="-X 'main.Version=${{ steps.get_version.outputs.VERSION }}'" -o bin/k8s-node-label-linux-amd64 ./cmd/k8s-node-label/...
    - name: Build Asset (linux arm64)
      run: CGO_ENABLED=0 GOOS=linux   GOARCH=arm64 go build -ldflags="-X 'main.Version=${{ steps.get_version.outputs.VERSION }}'" -o bin/k8s-node-label-linux-arm64 ./cmd/k8s-node-label/...
    - name: Build Asset (darwin amd64)
      run: CGO_ENABLED=0 GOOS=darwin   GOARCH=amd64 go build -ldflags="-X 'main.Version=${{ steps.get_version.outputs.VERSION }}'" -o bin/k8s-node-label-darwin-amd64 ./cmd/k8s-node-label/...
    - name: Build Asset (darwin arm64)
      run: CGO_ENABLED=0 GOOS=darwin   GOARCH=arm64 go build -ldflags="-X 'main.Version=${{ steps.get_version.outputs.VERSION }}'" -o bin/k8s-node-label-darwin-arm64 ./cmd/k8s-node-label/...

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          Build also available as docker image:
          `daspawnw/k8s-node-label:${{ steps.get_version.outputs.VERSION }}`

    - name: Upload Release Asset (linux amd64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bin/k8s-node-label-linux-amd64
        asset_name: k8s-node-label-linux-amd64
        asset_content_type: application/x-executable
    - name: Upload Release Asset (darwin amd64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bin/k8s-node-label-darwin-amd64
        asset_name: k8s-node-label-darwin-amd64
        asset_content_type: application/x-mach-binary
    - name: Upload Release Asset (linux arm64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bin/k8s-node-label-linux-arm64
        asset_name: k8s-node-label-linux-arm64
        asset_content_type: application/x-executable
    - name: Upload Release Asset (darwin arm64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bin/k8s-node-label-darwin-arm64
        asset_name: k8s-node-label-darwin-arm64
        asset_content_type: application/x-mach-binary

  docker:
    name: Docker Build

    if: github.repository == 'daspawnw/k8s-node-label'
    runs-on: ubuntu-latest

    needs: release

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: daspawnw/k8s-node-label:${{ steps.get_version.outputs.VERSION }}

  docker-forks:
    name: Release docker (fork)
    if: github.repository != 'daspawnw/k8s-node-label'
    runs-on: ubuntu-latest
    needs: release
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
#      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

#      # Install the cosign tool except on PR
#      # https://github.com/sigstore/cosign-installer
#      - name: Install cosign
#        if: github.event_name != 'pull_request'
#        uses: sigstore/cosign-installer@v2
#        with:
#          cosign-release: 'v1.11.0'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: ${{ format('RELEASE_VERSION={0}', github.ref_name) }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          format: 'template'
          ignore-unfixed: true
          exit-code: 1
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'MEDIUM,CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
#
#      # Sign the resulting Docker image digest except on PRs.
#      # This will only write to the public Rekor transparency log when the Docker
#      # repository is public to avoid leaking data.  If you would like to publish
#      # transparency data even for private images, pass --force to cosign below.
#      # https://github.com/sigstore/cosign
#      - name: Sign the published Docker image
#        if: ${{ github.event_name != 'pull_request' }}
#        env:
#          COSIGN_EXPERIMENTAL: "true"
#        # This step uses the identity token to provision an ephemeral certificate
#        # against the sigstore community Fulcio instance.
#        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}